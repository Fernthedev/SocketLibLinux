name: NDK build

env:
  module_id: socket_lib
  qmodName: socket_lib
  cache-name: socket_lib_cache

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true

    - uses: seanmiddleditch/gha-setup-ninja@v3

    - name: Setup NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r24

    - name: Create ndkpath.txt
      run: echo ${{ steps.setup-ndk.outputs.ndk-path }} > ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Get QPM
      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cargo-build.yml
        name: linux-qpm
        path: QPM
        repo: QuestPackageManager/QPM.CLI
        
    - name: QPM Collapse
      run: |
        chmod +x ./QPM/qpm
        ./QPM/qpm collapse

    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: /home/runner/.local/share/qpm/cache
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('qpm.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: QPM Restore
      run: |
        chmod +x ./QPM/qpm
        ./QPM/qpm restore

    - name: List Post Restore
      run: |
        echo includes:
        ls -la ${GITHUB_WORKSPACE}/extern/includes
        echo libs:
        ls -la ${GITHUB_WORKSPACE}/extern/libs
        echo cache:
        ls -la $HOME/.local/share/qpm/cache

    - name: Setup LLD
      run: |
        sudo apt install lld -y

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1
        ./QPM/qpm qmod build


    - name: Create Qmod
      run: |
        pwsh -Command ./createqmod.ps1 ${{env.qmodName}}

    - name: Get Library Name
      id: libname
      run: |
        cd ./build/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"
    - name: Upload non-debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./build/${{ steps.libname.outputs.NAME }}
        if-no-files-found: error

    - name: Upload qmod artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.qmodName}}.qmod
        path: ./${{ env.qmodName }}.qmod
        if-no-files-found: error

        # TODO: NEEDED?
#    - name: Upload debug artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: debug_${{ steps.libname.outputs.NAME }}
#        path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
#        if-no-files-found: error
    # TODO: Add auto-populating releases, auto update versions, auto publish package on release